@using TechChallenge1.Core.DTO
@using TechChallenge1.Web.Utils
@using TechChallenge1.Web.WebServices.Interfaces

@inject DialogService DialogService
@inject IContactWebService ContactWebService
@inject IStateWebService StateWebService
@inject NotificationService notificationService

<div>
    <EditForm OnValidSubmit="Submit" EditContext="_editContext">
        <DataAnnotationsValidator />
        <RadzenStack Gap="16">
            <RadzenTextBox @bind-Value="@Contact.Name" Placeholder="Nome" />
            <ValidationMessage For="() => Contact.Name" />

            <RadzenTextBox @bind-Value="@Contact.Email" Placeholder="Email" />
            <ValidationMessage For="() => Contact.Email" />

            <RadzenMask Mask="(**) *****-****" CharacterPattern="[0-9]" Placeholder="(00) 00000-0000" @bind-Value="@Contact.Phone" Change="OnPhoneChange" />
            <ValidationMessage For="() => Contact.Phone" />

            <RadzenTextBox @bind-Value="@Contact.StateName" Placeholder="Estado" Disabled=true />
            <ValidationMessage For="() => Contact.StateName" />

            <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="16">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Salvar" Disabled="IsLoading" />
                <RadzenButton Text="Cancelar" Variant=Variant.Outlined Click="@(() => DialogService.Close())" />
            </RadzenRow>
        </RadzenStack>
    </EditForm>
</div>

@code {
    private ContactDto Contact { get; set; } = new ContactDto();
    private bool IsLoading { get; set; }

    private EditContext _editContext;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Contact);
    }


    private async Task Submit()
    {
        IsLoading = true;
        StateHasChanged();

        var result = await ContactWebService.AddContact(Contact);

        if(result != null)
        {
            MessageScreen.ShowMessage(notificationService, "Contato", "Contato salvo com sucesso!", NotificationSeverity.Success);
            DialogService.Close(true);
        }

        else
        {
            MessageScreen.ShowMessage(notificationService, "Contato", "Erro ao salvar contato!", NotificationSeverity.Error);
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async void OnPhoneChange()
    {
        var phoneDDD = int.TryParse(Contact.Phone.Substring(1, 2), out int ddd);

        var response = await StateWebService.GetStateByDDD(ddd);

        if (response != null)
        {
            Contact.StateName = response.Name;
            StateHasChanged();
        }
    }
}
